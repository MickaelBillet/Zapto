@inject IStringLocalizer<Resource> Localizer
@inject IAirPollutionViewModel ViewModel
@implements IDisposable

<div class="d-flex align-center gap-4">
    <MudText Typo="Typo.h6" Color="Color.Primary">@Localizer["Outside Pollution"]</MudText>
</div>

<div class="mx-auto mt-2">
   <MudExpansionPanels>
        @if (this.Model != null)
        {
            <MudExpansionPanel HideIcon="true" IsExpanded="true">
                <TitleContent>
                    <div class="d-flex align-center">
                        <Circle Color="@this.Model.GetAQIColor()" Radius="15"></Circle>
                        <MudText Style="font-weight:500" Typo="Typo.h6" Align="Align.Left" Class="ml-8">AQI</MudText>
                        <MudText Style="font-weight:500" Typo="Typo.h6" Align="Align.Left" Class="ml-8">@this.Model.aqi</MudText>
                    </div>
                </TitleContent>
                <ChildContent>
                    <MudExpansionPanels>
                        @foreach (AirPollutionItemModel item in this.Model.Items)
                        {
                            <MudExpansionPanel>
                                <TitleContent>
                                    <div class="d-flex">
                                        <MudText Style="font-weight:500" Align="Align.Left" Class="ml-8 mt-1">@item.Name</MudText>
                                        <MudText Style="font-weight:500" Align="Align.Left" Class="ml-8 mt-1">@item.Value</MudText>
                                        <Circle Color="@item.GetLevelColor()" Radius="15"></Circle>
                                    </div>
                                </TitleContent>
                                <ChildContent>
                                    <MudTable Items="@item.LevelDescriptions" Hover="true" Breakpoint="Breakpoint.Sm">
                                        <HeaderContent>
                                            <MudTh>@Localizer["Value"]</MudTh>
                                            <MudTh>@Localizer["Status"]</MudTh>
                                        </HeaderContent>
                                        <RowTemplate>
                                            <MudTd>@context.description</MudTd>
                                            <Circle Color="@context.color" Radius="15"></Circle>
                                        </RowTemplate>
                                    </MudTable>
                                </ChildContent>
                            </MudExpansionPanel>
                        }
                    </MudExpansionPanels>                    
                </ChildContent>
            </MudExpansionPanel>       
        }
        else
        {
            <MudProgressCircular Color="Color.Default" Class="ml-6" Indeterminate="true" />
        }
    </MudExpansionPanels>
</div>

@code
{
    [Parameter]
    public string Latitude { get; set; }

    [Parameter]
    public string Longitude { get; set; }

    public AirPollutionModel Model { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (this.ViewModel != null)
        {
            await this.ViewModel.InitializeAsync(null);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if ((this.ViewModel != null) && (this.Latitude != null) && (this.Longitude != null))
        {
            this.Model = await this.ViewModel.GetAirPollutionModel(this.Longitude, this.Latitude);
            this.ViewModel.Refresh += RefreshView;
        }
    }

    public void Dispose()
    {
        if (this.ViewModel != null)
        {
            this.ViewModel.Refresh -= RefreshView;
            this.ViewModel?.Dispose();
            this.ViewModel = null;
        }
    }

    public void RefreshView(object sender, EventArgs e)
    {
        this.StateHasChanged();
    }
}

