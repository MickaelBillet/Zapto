@inject IStringLocalizer<Resource> Localizer
@inject IAirPollutionViewModel ViewModel
@implements IDisposable

@if (this.Model != null)
{
    <div class="d-flex align-center gap-4">
        <MudText Typo="Typo.h6" Color="Color.Primary">@Localizer["Outside Pollution"]</MudText>
    </div>

    <div class="mx-auto mt-2">
        <MudExpansionPanels>
            <MudExpansionPanel HideIcon="true" Expanded="true">
                <TitleContent>
                    <div class="d-flex align-center">
                        <Circle Color="@this.Model.GetAQIColor()" Radius="15"></Circle>
                        <MudText Style="font-weight:500" Typo="Typo.h6" Align="Align.Left" Class="ml-8">AQI</MudText>
                        <MudText Style="font-weight:500" Typo="Typo.h6" Align="Align.Left" Class="ml-8">@this.Model.Aqi</MudText>
                    </div>
                </TitleContent>
                <ChildContent>
                    <MudExpansionPanels>
                        @foreach (AirPollutionItemModel item in this.Model.Items)
                        {
                            <MudExpansionPanel>
                                <TitleContent>
                                    <MudGrid>
                                        <MudItem xs="12" sm="6" md="3">
                                            <MudText Style="font-weight:500" Class="mx-8 mt-1">@item.Name</MudText>
                                        </MudItem>
                                        <MudItem xs="12" sm="6" md="3">
                                            <MudText Style="font-weight:500" Class="mx-8 mt-1">@item.Value</MudText>
                                        </MudItem>
                                        @if ((item.Name != "no") && (item.Name != "nh3"))
                                        {
                                            <MudItem xs="12" sm="6" md="3">
                                                <Circle Color="@item.GetLevelColor()" Radius="15"></Circle>
                                            </MudItem>
                                        }
                                    </MudGrid>
                                </TitleContent>
                                <ChildContent>
                                    <MudText Typo="Typo.subtitle1">@item.Description</MudText>
                                    @if (item.HasStatus == true)
                                    {
                                        <div class="d-flex align-left">
                                            <MudText Typo="Typo.subtitle1" Align="Align.Left">[@item.Levels[0],@item.Levels[1])</MudText>
                                            <MudContainer Class="mt-1" MaxWidth="MaxWidth.ExtraSmall">
                                                <Circle Color="@item.GetLevelColor(0)" Radius="10"></Circle>
                                            </MudContainer>
                                            <MudText Typo="Typo.subtitle1" Class="ml-4" Align="Align.Left">[@item.Levels[1],@item.Levels[2])</MudText>
                                            <MudContainer Class="mt-1" MaxWidth="MaxWidth.ExtraSmall">
                                                <Circle Color="@item.GetLevelColor(1)" Radius="10"></Circle>
                                            </MudContainer>
                                            <MudText Typo="Typo.subtitle1" Class="ml-4">[@item.Levels[2],@item.Levels[3])</MudText>
                                            <MudContainer Class="mt-1" MaxWidth="MaxWidth.ExtraSmall">
                                                <Circle Color="@item.GetLevelColor(2)" Radius="10"></Circle>
                                            </MudContainer>
                                            <MudText Typo="Typo.subtitle1" Class="ml-4">[@item.Levels[3],@item.Levels[4])</MudText>
                                            <MudContainer Class="mt-1" MaxWidth="MaxWidth.ExtraSmall">
                                                <Circle Color="@item.GetLevelColor(3)" Radius="10"></Circle>
                                            </MudContainer>
                                            <MudText Typo="Typo.subtitle1" Class="ml-4">>=@item.Levels[4]</MudText>
                                            <MudContainer Class="mt-1" MaxWidth="MaxWidth.ExtraSmall">
                                                <Circle Color="@item.GetLevelColor(4)" Radius="10"></Circle>
                                            </MudContainer>
                                        </div>
                                    }
                                </ChildContent>
                            </MudExpansionPanel>
                        }
                    </MudExpansionPanels>                    
                </ChildContent>
            </MudExpansionPanel>       
        </MudExpansionPanels>
    </div>
}

@code
{
    [Parameter]
    public LocationModel Location { get; set; } = null;

    private AirPollutionModel Model { get; set; } = null;    
    private bool HasError { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        if (this.ViewModel != null)
        {
            await this.ViewModel.InitializeAsync(null);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if ((this.ViewModel != null) && (this.Location != null) && (this.Location.Location != null))
        {
            (this.Model, this.HasError) = await this.ViewModel.GetAirPollutionModel(this.Location);
            if (this.Model != null)
            {
                this.ViewModel.Refresh += RefreshView;
            }
        }
    }

    public void Dispose()
    {
        if (this.ViewModel != null)
        {
            this.ViewModel.Refresh -= RefreshView;
            this.ViewModel?.Dispose();
            this.ViewModel = null;
        }
    }

    public void RefreshView(object sender, EventArgs e)
    {
        this.StateHasChanged();
    }
}

