@inject IStringLocalizer<Resource> Localizer
@inject ILocationViewModel ViewModel
@implements IDisposable

@if (this.LocationFound)
{
    <MudText Typo="Typo.h5" Color="Color.Primary" Class="mt-6">@this.Model.Location</MudText>
}
else if ((this.LocalizationIsAvailable == null) || ((this.LocalizationIsAvailable == true) && (this.LocationFound == false)))
{
    <div class="d-flex align-items-start flex-column mt-6">
        <div class="d-flex flex-row align-items-center">
            <MudText Typo="Typo.h5" Color="Color.Primary">@this.Localizer["Location in progress"]</MudText>
            <MudProgressCircular Color="Color.Default" Class="ml-6 mt-3" Size="Size.Medium" Indeterminate="true" />
        </div>
        </div>
}
else if (this.LocalizationIsAvailable == false)
{
    <MudText Typo="Typo.h5" Color="Color.Primary" Class="mt-6">@this.Localizer["Unable to locate"]</MudText>
}

@code {
    [Parameter]
    public LocationModel Model { get; set; } = null;

    private bool LocationFound
    {
        get
        {
            return string.IsNullOrEmpty(this.Model.Location) == false;
        }
    }

    private bool LocalizationFound
    {
        get
        {
            return (this.Model.Latitude != null) && (this.Model.Longitude != null);
        }
    }

    private bool? LocalizationIsAvailable
    {
        get
        {
            return this.Model.LocalizationIsAvailable;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (this.ViewModel != null)
        {
            await this.ViewModel.InitializeAsync(null);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if ((this.ViewModel != null) && (this.Model != null))                
        {
            if ((this.LocationFound == false) && (this.LocalizationFound == true))
            {
                this.Model.Location = await this.ViewModel.GetReverseLocation(this.Model.Latitude.ToString(), this.Model.Longitude.ToString());
            }
        }
    }

    public void Dispose()
    {
        this.ViewModel?.Dispose();
    }
}
