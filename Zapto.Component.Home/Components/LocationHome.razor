@inject IStringLocalizer<Resource> Localizer
@inject ILocationViewModel ViewModel
@implements IDisposable

@if (this.Location != null)
{
    <MudText Typo="Typo.h5" Color="Color.Primary" Class="mt-6">@this.Location</MudText>
}
else
{
    <MudProgressCircular Color="Color.Default" Class="ml-6 my-2" Indeterminate="true" />
}

@code {
    [Parameter]
    public LocationModel Model { get; set; } = null;

    private string Location { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        if (this.ViewModel != null)
        {
            await this.ViewModel.InitializeAsync(null);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if ((this.ViewModel != null) 
                && (this.Model != null)
                && (this.Model.Latitude != null)
                && (this.Model.Longitude != null))
        {
            if (string.IsNullOrEmpty(this.Model.Location))
            {
                this.Location = await this.ViewModel.GetLocation(this.Model.Latitude.ToString(), this.Model.Longitude.ToString());
                if (this.Location == null)
                {
                    throw new Exception("Location Service KO");
                }
            }
            else
            {
                this.Location = this.Model.Location;
            }
        }
    }

    public void Dispose()
    {
        this.ViewModel?.Dispose();
    }
}
