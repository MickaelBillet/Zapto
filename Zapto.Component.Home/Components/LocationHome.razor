@inject IStringLocalizer<Resource> Localizer
@inject ILocationViewModel ViewModel
@implements IDisposable

<div class="d-flex flex-column">
    @if (this.Model != null)
    {
        <div class="d-flex justify-content-between mb-6">
            <MudText Typo="Typo.h5" Color="Color.Primary" Class="mt-6">@this.Model.Name</MudText>
            <div style="width:400px">
                <MudAutocomplete T="string"
                                 Label="@Localizer["CitySearch"]"
                                 @bind-Value="value"
                                 SearchFunc="@Search"
                                 ResetValueOnEmptyText="true"
                                 CoerceText="true"
                                 CoerceValue="true"
                                 AdornmentIcon="@Icons.Material.Filled.Search"
                                 AdornmentColor="Color.Primary" />
            </div>
        </div>
    }
    else
    {
        <MudProgressCircular Color="Color.Default" Class="ml-6 my-2" Indeterminate="true" />
    }
</div>

@code {
    [Parameter]
    public string Longitude { get; set; }

    [Parameter]
    public string Latitude { get; set; }

    public LocationModel Model { get; set; }

    private string value;

    protected override async Task OnInitializedAsync()
    {
        if (this.ViewModel != null)
        {
            await this.ViewModel.InitializeAsync(null);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if ((this.ViewModel != null) && (string.IsNullOrEmpty(this.Latitude) == false) && (string.IsNullOrEmpty(this.Longitude) == false))
        {
            this.Model = await this.ViewModel.GetLocationModel(this.Latitude, this.Longitude);
            if (this.Model == null)
            {
                throw new Exception("Location Service KO");
            }
        }
    }

    public void Dispose()
    {
        this.ViewModel?.Dispose();
    }

    private async Task<IEnumerable<string>> Search(string value)
    {
        return Enumerable.Empty<string>();
    }
}
