@inject IStringLocalizer<Resource> Localizer
@inject ILocationViewModel ViewModel
@inject ISnackbar Snackbar
@implements IDisposable

<MudText Typo="Typo.h5" Color="Color.Primary" Class="mt-6">@this.Text</MudText>

@code {
    [Parameter]
    public LocationModel Model { get; set; } = null;

    private string Text { get; set; } = string.Empty;

    private bool LocationFound
    {
        get
        {
            return string.IsNullOrEmpty(this.Model.Location) == false;
        }
    }

    private bool LocalizationFound
    {
        get
        {
            return (this.Model != null) && (this.Model.Latitude != null) && (this.Model.Longitude != null);
        }
    }

    private bool? LocalizationIsAvailable
    {
        get
        {
            return this.Model.LocalizationIsAvailable;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (this.ViewModel != null)
        {
            await this.ViewModel.InitializeAsync(null);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if ((this.ViewModel != null) && (this.Model != null))                
        {
            try
            {
                if (this.LocalizationIsAvailable == null)
                {
                    this.Text = this.Localizer["Location in progress"];
                }
                else if ((this.LocalizationIsAvailable == true) && (this.LocationFound == false) && (this.LocalizationFound == true))
                {
                    this.Model.Location = await this.ViewModel.GetReverseLocation(this.Model.Latitude.ToString(), this.Model.Longitude.ToString());
                    if (this.Model?.Location != null)
                    {
                        this.Text = this.Model.Location;
                    }
                    else
                    {
                        this.Text = this.Localizer["Unable to locate"];
                    }
                }
                else if (this.LocalizationIsAvailable == false)
                {
                    this.Text = this.Localizer["Unable to locate"];
                }
            }
            catch (Exception ex)
            {
                this.Text = this.Localizer["Unable to locate"];
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }
    }

    public void Dispose()
    {
        this.ViewModel?.Dispose();
    }
}
