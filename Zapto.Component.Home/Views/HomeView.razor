@inject IStringLocalizer<Resource> Localizer
@inject IHomeViewModel ViewModel
@inject IPositionService PositionService
@inject IJSRuntime JsRuntime
@implements IDisposable

<ErrorBoundary @ref="ErrorBoundaryLocation">
    <ChildContent>
        <LocationHome Latitude="@this.Latitude" Longitude="@this.Longitude"></LocationHome>
    </ChildContent>
    <ErrorContent>
        <MudContainer Style="height:80px;" Class="d-flex align-center gap-2">
            <MudText Typo="Typo.h6" Class="mr-4">Location Service @this.Localizer["HS"]</MudText>
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.ErrorOutline" @onclick="ResetErrorLocation" Color="Color.Warning">Reload</MudButton>
        </MudContainer>
    </ErrorContent>
</ErrorBoundary>

<ErrorBoundary @ref="ErrorBoundaryWeather">
    <ChildContent>
        <WeatherHome Longitude="@this.Longitude" Latitude="@this.Latitude"></WeatherHome>
    </ChildContent>
    <ErrorContent>
        <MudContainer Style="height:80px;" Class="d-flex align-center gap-2">
            <MudText Typo="Typo.h6" Class="mr-4">Weather Service @this.Localizer["HS"]</MudText>
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.ErrorOutline" @onclick="ResetErrorWeather" Color="Color.Warning">Reload</MudButton>
        </MudContainer>
    </ErrorContent>
</ErrorBoundary>

<ErrorBoundary @ref="ErrorBoundaryAirPollution">
    <ChildContent>
        <AirPollutionHome Longitude="@this.Longitude" Latitude="@this.Latitude"></AirPollutionHome>
    </ChildContent>
    <ErrorContent>
        <MudContainer Style="height:80px;" Class="d-flex align-center gap-2">
            <MudText Typo="Typo.h6" Class="mr-4">AirPollution Service @this.Localizer["HS"]</MudText>
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.ErrorOutline" @onclick="ResetErrorAirPollution" Color="Color.Warning">Reload</MudButton>
        </MudContainer>
    </ErrorContent>
</ErrorBoundary>

@code
    {
    public string Longitude { get; set; }
    public string Latitude { get; set; }
    private ErrorBoundary ErrorBoundaryAirPollution;
    private ErrorBoundary ErrorBoundaryWeather;
    private ErrorBoundary ErrorBoundaryLocation;

    protected override async Task OnInitializedAsync()
    {
        #if DEBUG
    //await Task.Delay(5000);
        #endif
        if (this.ViewModel != null)
        {
            await this.ViewModel.InitializeAsync(null);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if ((this.ViewModel != null) && (this.PositionService != null))
        {
            await this.PositionService.GetCurrentPosition(JsRuntime, GetPositionAsync, GetErrorAsync);

            ErrorBoundaryWeather?.Recover();
            ErrorBoundaryAirPollution?.Recover();
            ErrorBoundaryLocation?.Recover();
        }
    }

    private async Task GetErrorAsync(string error)
    {
        await Task.FromResult<string>(error);
    }

    private async Task GetPositionAsync(double longitude, double latitude)
    {
        this.Longitude = longitude.ToString();
        this.Latitude = latitude.ToString();

        //Warning don't delete this line
        this.StateHasChanged();

        await Task.FromResult<bool>(true);
    }

    public void Dispose()
    {
        this.ViewModel?.Dispose();
    }

    private void ResetErrorWeather()
    {
        ErrorBoundaryWeather?.Recover();
    }

    private void ResetErrorAirPollution()
    {
        ErrorBoundaryAirPollution?.Recover();
    }

    private void ResetErrorLocation()
    {
        ErrorBoundaryLocation?.Recover();
    }
}
