@inject IStringLocalizer<Resource> Localizer
@inject IHomeViewModel ViewModel
@inject IPositionService PositionService
@inject IJSRuntime JsRuntime
@implements IDisposable

<div class="d-flex flex-column">
    <div class="d-flex justify-content-between mb-6">
        <LocationHome Model="@this.Model"></LocationHome>
        <LocationSearch ModelChanged="@this.SelectLocation"></LocationSearch>
    </div>
</div>

<WeatherHome Location="@this.Model"></WeatherHome>
<AirPollutionHome Location="@this.Model"></AirPollutionHome>

@code
{
    private LocationModel Model { get; set; } = new LocationModel()
    {
        LocalizationIsAvailable = ProgressStaus.InProgress
    };

    protected override async Task OnInitializedAsync()
    {
        #if DEBUG
     await Task.Delay(5000);
        #endif

        if (this.ViewModel != null)
        {
            await this.ViewModel.InitializeAsync(this.Model);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if ((this.ViewModel != null) && (this.PositionService != null))
        {
            await this.PositionService.GetCurrentPosition(JsRuntime, GetPositionAsync, GetErrorAsync);
        }
    }

    private async Task GetErrorAsync(string error)
    {
        await this.ViewModel.SetError();
        this.StateHasChanged();
    }

    private async Task GetPositionAsync(double longitude, double latitude)
    {
        await this.ViewModel.SetLocation(Math.Round(longitude, 6), Math.Round(latitude, 6));
        this.StateHasChanged();
    }

    public void Dispose()
    {
        this.ViewModel?.Dispose();
    }

    private void SelectLocation(LocationModel model)
    {
        this.ViewModel.UpdateLocationModel(model);
        this.StateHasChanged();
    }
}
