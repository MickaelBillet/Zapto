@inject IStringLocalizer<Resource> Localizer
@inject IHomeViewModel ViewModel
@inject IPositionService PositionService
@inject IJSRuntime JsRuntime
@implements IDisposable


<div class="d-flex align-center gap-4 mb-2">
    <MudText Typo="Typo.h5" Color="Color.Primary">@this.Location?.Name</MudText>
</div>
<WeatherHome Longitude="@this.Longitude" Latitude="@this.Latitude"></WeatherHome>

<ErrorBoundary @ref="ErrorBoundaryRef">
    <ChildContent>
        <AirPollutionHome Longitude="@this.Longitude" Latitude="@this.Latitude"></AirPollutionHome>
    </ChildContent>
    <ErrorContent>
        <p class="error-message">Uh oh! Something went wrong</p>
        <button class="btn btn-warning" @onclick="ResetError">Reset</button>
    </ErrorContent>
</ErrorBoundary>

@code
{
    public LocationModel Location { get; set; }
    public string Longitude { get; set; }
    public string Latitude { get; set; }
    private ErrorBoundary ErrorBoundaryRef;

    protected override async Task OnInitializedAsync()
    {
        if (this.ViewModel != null)
        {
            await this.ViewModel.InitializeAsync(null);
            await this.PositionService.GetCurrentPosition(JsRuntime, GetPositionAsync);
        }
    }

    private async Task GetPositionAsync(double longitude, double latitude)
    {
        this.Longitude = longitude.ToString();
        this.Latitude = latitude.ToString();
        this.Location = await this.ViewModel.GetLocationModel(this.Latitude, this.Longitude);
        this.StateHasChanged();
    }

    public void Dispose()
    {
        this.ViewModel?.Dispose();
    }

    protected override void OnParametersSet()
    {
        ErrorBoundaryRef?.Recover();
    }

    private void ResetError()
    {
        ErrorBoundaryRef?.Recover();
    }
}
