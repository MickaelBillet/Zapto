@inherits LayoutComponentBase
@inject IMainViewModel? ViewModel
@inject ILogger<MainLayout> Logger
@implements IDisposable

<MudThemeProvider Theme="_theme" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="25">
        <MudHidden Breakpoint="Breakpoint.SmAndDown">
            <MudIcon Icon="@Icons.Custom.Brands.MudBlazor" Size="Size.Large" />
        </MudHidden>
        <MudHidden Breakpoint="Breakpoint.MdAndUp">
            <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        </MudHidden>
        <MudHidden Breakpoint="Breakpoint.Xs">
            <MudText Typo="Typo.h6" Class="ml-4">Zapto</MudText>
        </MudHidden>
        <MudHidden Breakpoint="Breakpoint.Xs" Invert="true">
            <MudText Typo="Typo.subtitle2">Zapto</MudText>
        </MudHidden>
        <MudSpacer />
        <AccessControl/> 
        <div class="mx-3"></div>
        <ChooseLanguage></ChooseLanguage>
    </MudAppBar>
    <AuthorizeView Policy="user">
        <Authorized>
            <MudDrawer @bind-Open="_drawerOpen" Elevation="25" ClipMode="DrawerClipMode.Always">
                <NavMenu />
            </MudDrawer>
        </Authorized>
    </AuthorizeView>
    <MudMainContent>
        <AuthorizeView Policy="user">
            <Authorized>
                <MudHidden Breakpoint="Breakpoint.SmAndDown">
                    <MudToolBar DisableGutters="true">
                        <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Inherit" OnClick="@((e) => DrawerToggle())" Class="ml-3" />
                        <MudSpacer />
                    </MudToolBar>
                </MudHidden>
            </Authorized>
        </AuthorizeView>
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-1">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>


@code {
    private ZaptoWebTheme _theme = new();

    public bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override async Task OnInitializedAsync()
    {
        if (this.ViewModel != null)
        {
            this.Logger.LogInformation("Starting");
            await this.ViewModel.InitializeAsync(null);
        }
    }

    public void Dispose()
    {
        if (this.ViewModel != null)
        {
            this.ViewModel?.Dispose();
            this.ViewModel = null;
        }
    }
}