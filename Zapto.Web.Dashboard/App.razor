@using System.Reflection
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.WebAssembly.Services
@inject LazyAssemblyLoader AssemblyLoader
@inject IStringLocalizer<Resource> Localizer
    
<ErrorBoundary @ref="ErrorBoundaryRef">
    <ChildContent>
        <CascadingAuthenticationState>
            <Router AppAssembly="@typeof(App).Assembly"
                    AdditionalAssemblies="@LazyLoadedAssemblies"
                    OnNavigateAsync="@OnNavigateAsync">
                <Navigating>
                </Navigating>
                <Found Context="routeData">
                    <AuthorizeRouteView Resource="@routeData" RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                        <Authorizing>
                            <p>@Localizer["Determining session state, please wait..."]</p>
                        </Authorizing>
                        <NotAuthorized>
                            <p>@Localizer["You're not authorized to reach this page. You need to log in."]</p>
                        </NotAuthorized>
                    </AuthorizeRouteView>
                </Found>
                <NotFound>
                    <PageTitle>@Localizer["Not found"]</PageTitle>
                    <LayoutView Layout="@typeof(MainLayout)">
                        <p role="alert">@Localizer["Sorry, there's nothing at this address."]</p>
                    </LayoutView>
                </NotFound>
            </Router>
        </CascadingAuthenticationState>
    </ChildContent>
    <ErrorContent>
        <MudContainer Style="height:80px;" Class="d-flex align-center gap-2">
            <MudText Typo="Typo.body2">😈 A rotten gremlin got us. Sorry!</MudText>
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.ErrorOutline" @onclick="ResetError" Color="Color.Warning">Reload</MudButton>
        </MudContainer>
    </ErrorContent>
</ErrorBoundary>

@code {
    private List<Assembly> LazyLoadedAssemblies { get; set; } = new();

    private ErrorBoundary? ErrorBoundaryRef;

    private async Task OnNavigateAsync(NavigationContext args)
    {
        if (args.Path.Contains("dashboard"))
        {
            var assemblies = await AssemblyLoader.LoadAssembliesAsync(new[] {"Zapto.Component.Dashboard.dll"});
            this.LazyLoadedAssemblies.AddRange(assemblies);
        }
        else if (args.Path.Contains("healthcheck"))
        {
            var assemblies = await AssemblyLoader.LoadAssembliesAsync(new[] { "Zapto.Component.Healthcheck.dll" });
            this.LazyLoadedAssemblies.AddRange(assemblies);
        }
        else if (args.Path.Contains("roomchartlist"))
        {
            var assemblies = await AssemblyLoader.LoadAssembliesAsync(new[] { "Zapto.Component.Charts.dll" });
            this.LazyLoadedAssemblies.AddRange(assemblies);
        }
        else if (args.Path.Contains("airpollutiondetails"))
        {
            var assemblies = await AssemblyLoader.LoadAssembliesAsync(new[] { "Zapto.Component.AirPollution.dll" });
            this.LazyLoadedAssemblies.AddRange(assemblies);
        }
    }
    protected override void OnParametersSet()
    {
        ErrorBoundaryRef?.Recover();
    }

    private void ResetError()
    {
        ErrorBoundaryRef?.Recover();
    }
}