@inject IStringLocalizer<Resource> Localizer
@inject IAirPollutionViewModel? ViewModel 
@inject ISnackbar Snackbar
@implements IDisposable

<MudPaper Style="height:120px;">
    <MudStack Justify="Justify.SpaceBetween" Row="true">
        <MudText Typo="Typo.subtitle1" Class="mx-2">@Localizer["Outside Pollution"]</MudText>
        <MudIconButton Size="Size.Small"
                       Class="mt-0 mr-1"
                       OnClick="@((e) => ShowAirPollutionDetails())"
                       Icon="@Icons.Material.Outlined.Info"
                       Color="@Color.Primary" />
    </MudStack>
    
    <MudContainer Style="height:80px;" Class="d-flex align-items-center justify-content-center gap-2">
        @if (this.Model != null)
        {
            <MudText Typo="Typo.h5" Color="Color.Primary" Style="font-weight:bold" Class="ml-4">AQI</MudText>
            <MudText Typo="Typo.h5" Class="ml-3 mr-10">@this.Model?.Aqi</MudText>
            if (this.Model?.Aqi == 1) 
            {
                <MudText Align="Align.Center" Typo="Typo.h5" Class="mr-4" Color="Color.Success">@Localizer["Good"]</MudText>
            }
            else if (this.Model?.Aqi == 2)
            {
                <MudText Align="Align.Center" Typo="Typo.h5" Class="mr-4" Color="Color.Warning">@Localizer["Fair"]</MudText>
            }
            else if (this.Model?.Aqi == 3)
            {
                <MudText Align="Align.Center" Typo="Typo.h5" Class="mr-4" Color="Color.Warning">@Localizer["Moderate"]</MudText>
            }
            else if (this.Model?.Aqi == 4)
            {
                <MudText Align="Align.Center" Typo="Typo.h5" Class="mr-4" Color="Color.Error">@Localizer["Poor"]</MudText>
            }
            else if (this.Model?.Aqi == 5)
            {
                <MudText Align="Align.Center" Typo="Typo.h5" Class="mr-4" Color="Color.Error">@Localizer["Very Poor"]</MudText>
            }
        }
        else if ((this.Model == null) && (this.HasError == true))
        {
            <MudText Typo="Typo.h5" Color="Color.Error" Class="mx-4">@this.Localizer["Error"]</MudText>
        }
        else
        {
            <MudProgressCircular Color="Color.Default" Class="ml-6" Indeterminate="true" />
        }
    </MudContainer>
</MudPaper>

@code 
{
    public AirPollutionModel? Model { get; set; }
    private bool HasError { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        if (this.ViewModel != null)
        {
            await this.ViewModel.InitializeAsync(null);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if ((this.ViewModel != null) && (this.Model == null))
        {
            try
            {
                this.Model = await this.ViewModel.GetAirPollutionModel();
                if (this.Model != null)
                {
                    this.ViewModel.Refresh += RefreshView;
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
                this.HasError = true;
            }
        }
    }

    public void Dispose()
    {
        if (this.ViewModel != null)
        {
            this.ViewModel.Refresh -= RefreshView;
            this.ViewModel?.Dispose();
            this.ViewModel = null;
        }
    }

    public void RefreshView(object? sender, EventArgs e)
    {
        this.StateHasChanged();
    }

    public void ShowAirPollutionDetails()
    {
        if ((this.ViewModel != null) && (this.Model != null))
        {
            this.ViewModel.OpenDetails(this.Model);
        }
    }
}
