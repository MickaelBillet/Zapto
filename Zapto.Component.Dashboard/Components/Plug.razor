@inject IStringLocalizer<Resource> Localizer
@inject IPlugViewModel? ViewModel
@implements IDisposable

<MudPaper Class="mb-4 mx-2" Elevation="0" Style="@($"background:{Colors.Grey.Lighten4};width:fit-content")">
    <MudContainer Fixed="true">    
        <MudGrid Spacing="0" Justify="Justify.Center" >
            <MudItem xs=6 sm=6 md=6 Class="my-5">
                <MudText Align="Align.Center" Class="mx-2">@this.Model?.Name</MudText>
                <MudPaper Square="true" Style="@($"background:{Colors.Grey.Lighten4};")" Class="d-flex justify-content-center mt-2" Elevation="0">
                    <img height="25" class="ml-0 my-0" src="@this.Model?.FileNameTypeImage"/>
                    <img height="25" class="ml-5 my-0" src="@this.Model?.FileNameStatusImage"/>
                </MudPaper>
            </MudItem>
            <MudItem xs=6 sm=6 md=6 Style="min-width:120px">
                @if (this.Model != null)
                {
                    <MudRadioGroup @bind-SelectedOption="@this.Model.Command" Class="my-5" >
                        <MudRadio Option="1" Color="Color.Primary" @onchange="SendCommand" Size="Size.Small">@Localizer["Arrêt"]</MudRadio>
                        <MudRadio Option="2" Color="Color.Secondary" @onchange="SendCommand" Size="Size.Small">@Localizer["Marche"]</MudRadio>
                        <MudRadio Option="3" Color="Color.Tertiary" @onchange="SendCommand" Size="Size.Small">@Localizer["Programme"]</MudRadio>
                    </MudRadioGroup>
                }
            </MudItem>
        </MudGrid>
    </MudContainer>
</MudPaper>

@code 
{
    [Parameter]
    public PlugModel? Model { get; set; }
    private bool HasLaunch = false;

    protected override async Task OnInitializedAsync()
    {
        if (this.ViewModel != null)
        {
            await this.ViewModel.InitializeAsync(null);
            this.ViewModel.Refresh += RefreshView;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if ((this.Model != null) && (this.ViewModel != null) && (this.HasLaunch == false))
        {
            this.HasLaunch = await this.ViewModel.ReceiveStatusAsync(this.Model);
        }
    }

    public void Dispose()
    {
        if (this.ViewModel != null)
        {
            this.ViewModel.Refresh -= RefreshView;
            this.ViewModel?.Dispose();
            this.ViewModel = null;
        }
    }

    public async Task SendCommand()
    {
        bool? res = null;
        if ((this.Model != null) && (this.ViewModel != null))
        {
            res = await this.ViewModel.SendCommandAsync(this.Model?.Command, this.Model?.Id);
        }
    }

    public void RefreshView(object? sender, EventArgs e)
    {
        this.StateHasChanged();
    }
}
