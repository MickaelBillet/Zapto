@inject IStringLocalizer<Resource> Localizer
@inject ILocationViewModel ViewModel
@inject ISnackbar Snackbar
@implements IDisposable

<div class="d-flex align-center gap-4 mb-2">
    <MudText Typo="Typo.h5" Color="Color.Primary">@this.Text</MudText>
    @if ((this.Text != null) && (this.Text != this.Localizer["Unable to locate"]))
    {
        <MudIconButton Size="Size.Small"
                    OnClick="@(async (e) => await TestNotificationButton())"
                    Icon="@Icons.Material.Filled.NotificationsActive"
                    Color="@Color.Info" />
    }
</div>

@code 
{
    [Parameter]
    public LocationModel? Model { get; set; } = null;

    [Parameter]
    public EventCallback<LocationModel?> ModelChanged { get; set; }

    private string? Text { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        if (this.ViewModel != null)
        {
            await this.ViewModel.InitializeAsync(null);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if ((this.ViewModel != null) && (this.Model == null))
        {
            try
            {
                this.Model = await this.ViewModel.GetLocationModel();
                if (this.Model?.Location != null)
                {
                    this.Text = this.Model.Location;
                    await this.ModelChanged.InvokeAsync(this.Model);
                }
                else
                {
                    this.Text = this.Localizer["Unable to locate"];
                }
            }
            catch (Exception ex)
            {
                this.Text = this.Localizer["Unable to locate"];
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }
    }

    public void Dispose()
    {
        this.ViewModel?.Dispose();
    }

    public async Task TestNotificationButton()
    {
        if ((this.ViewModel != null) && (this.Model != null))
        {
            await this.ViewModel.TestNotification(this.Model?.Id);
        }
    }
}
