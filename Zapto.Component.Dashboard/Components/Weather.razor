@inject IWeatherViewModel? ViewModel 
@inject ISnackbar Snackbar
@inject IStringLocalizer<Resource> Localizer
@implements IDisposable

<MudGrid Class="mb-2">
    <MudItem xs="12" sm="6" md="3" Style="min-width:380px">
        <MudPaper Class="d-flex align-center" Style="height:110px;">
            <MudImage Src="@this.Model?.Image"></MudImage>            
            @if (this.Model != null)
            {
                <MudText Typo="Typo.h5" Align="Align.Left">@this.Model?.WeatherText</MudText>  
            }
            else if ((this.Model == null) && (this.HasError == true))
            {
                <MudText Typo="Typo.h5" Color="Color.Error" Class="mx-4">@this.Localizer["Error"]</MudText>
            }
            else
            {
                <MudProgressCircular Color="Color.Default" Class="ml-6" Indeterminate="true" />
            }
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6" md="3" Style="min-width:380px">
        <MudPaper Class="d-flex align-items-center justify-content-center" Style="height:110px;">
            <MudIcon Icon="@Icons.Material.Filled.Thermostat" Color="Color.Primary" Style="width:54px; height:54px;"></MudIcon>
            @if (this.Model != null)
            {
                <div class="flex-column ml-4">
                    <div class="d-flex flex-row align-items-center" style="height:15px">
                        <MudText Typo="Typo.h6">@this.Model?.TemperatureMax</MudText>
                        <MudText Typo="Typo.body1" Class="ml-2">Max</MudText>
                    </div>
                    <div class="d-flex flex-row align-items-center ml-5">
                        <MudText Typo="Typo.h4" Class="ml-2">@this.Model?.Temperature</MudText>
                        <MudText Typo="Typo.h5" Class="mx-2">°C</MudText>
                    </div>
                    <div class="d-flex flex-row align-items-center ml-10" style="height:15px">
                        <MudText Typo="Typo.h6" Class="ml-6">@this.Model?.TemperatureMin</MudText>
                        <MudText Typo="Typo.body1" Class="ml-2">Min</MudText>
                    </div>
                </div>
            }
            else if ((this.Model == null) && (this.HasError == true))
            {
                <MudText Typo="Typo.h5" Color="Color.Error" Class="mx-4">@this.Localizer["Error"]</MudText>
            }
            else
            {
                <MudProgressCircular Color="Color.Default" Class="ml-6" Indeterminate="true" />
            }
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6" md="3" Style="min-width:380px">
        <MudPaper Class="d-flex align-items-center justify-content-center" Style="height:110px;">
            @if (this.Model != null)
            {
                if ((this.Model.WindDirection >= 22) && (this.Model.WindDirection < 67))
                {
                    <MudIcon Class="mx-2" Icon="@Icons.Material.Filled.NorthEast" Color="Color.Primary" Style="width:54px; height:54px;"></MudIcon>
                }
                else if ((this.Model.WindDirection >= 67) && (this.Model.WindDirection < 112))
                {
                    <MudIcon Class="mx-2" Icon="@Icons.Material.Filled.East" Color="Color.Primary" Style="width:54px; height:54px;"></MudIcon>
                }
                else if ((this.Model.WindDirection >= 112) && (this.Model.WindDirection < 157))
                {
                    <MudIcon Class="mx-2" Icon="@Icons.Material.Filled.SouthEast" Color="Color.Primary" Style="width:54px; height:54px;"></MudIcon>
                }
                else if ((this.Model.WindDirection >= 157) && (this.Model.WindDirection < 202))
                {
                    <MudIcon Class="mx-2" Icon="@Icons.Material.Filled.South" Color="Color.Primary" Style="width:54px; height:54px;"></MudIcon>
                }
                else if ((this.Model.WindDirection >= 202) && (this.Model.WindDirection < 247))
                {
                    <MudIcon Class="mx-2" Icon="@Icons.Material.Filled.SouthWest" Color="Color.Primary" Style="width:54px; height:54px;"></MudIcon>
                }
                else if ((this.Model.WindDirection >= 247) && (this.Model.WindDirection < 292))
                {
                    <MudIcon Class="mx-2" Icon="@Icons.Material.Filled.West" Color="Color.Primary" Style="width:54px; height:54px;"></MudIcon>
                }
                else if ((this.Model.WindDirection >= 292) && (this.Model.WindDirection < 337))
                {
                    <MudIcon Class="mx-2" Icon="@Icons.Material.Filled.NorthWest" Color="Color.Primary" Style="width:54px; height:54px;"></MudIcon>
                }
                else 
                {
                    <MudIcon Class="mx-2" Icon="@Icons.Material.Filled.North" Color="Color.Primary" Style="width:54px; height:54px;"></MudIcon>
                }

                <MudText Typo="Typo.h4" Class="ml-4">@this.Model?.WindSpeed</MudText>
                <MudText Typo="Typo.h5" Align="Align.Left" Class="mx-2">km/h</MudText>
            }
            else if ((this.Model == null) && (this.HasError == true))
            {
                <MudText Typo="Typo.h5" Color="Color.Error" Class="mx-4">@this.Localizer["Error"]</MudText>
            }
            else
            {
                <MudProgressCircular Color="Color.Default" Class="ml-6" Indeterminate="true" />
            }
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6" md="3" Style="min-width:380px">
        <MudPaper Class="d-flex align-items-center justify-content-center" Style="height:110px;">
            <MudText Typo="Typo.h4" Color="Color.Primary" Style="font-weight:bold">P</MudText>
            @if (this.Model != null)
            {
                <MudText Typo="Typo.h4" Class="ml-4">@this.Model?.Pressure</MudText>
                <MudText Typo="Typo.h5" Align="Align.Left" Class="mx-2">hPa</MudText>
            }
            else if ((this.Model == null) && (this.HasError == true))
            {
                <MudText Typo="Typo.h5" Color="Color.Error" Class="mx-4">@this.Localizer["Error"]</MudText>
            }
            else
            {
                <MudProgressCircular Color="Color.Default" Class="ml-6" Indeterminate="true" />
            }
        </MudPaper>
    </MudItem>
</MudGrid>

@code 
{
    private WeatherModel? Model { get; set; } = null;
    private bool HasError { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        if (this.ViewModel != null)
        {
            await this.ViewModel.InitializeAsync(null);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if ((this.ViewModel != null) && (this.Model == null))
        {
            try
            {
                this.Model = await this.ViewModel.GetWeatherModel();
                if (this.Model != null)
                {
                    this.ViewModel.Refresh += RefreshView;
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
                this.HasError = true;
            }
        }
    }

    public void Dispose()
    {
        if (this.ViewModel != null)
        {
            this.ViewModel.Refresh -= RefreshView;
            this.ViewModel?.Dispose();
            this.ViewModel = null;
        }
    }

    public void RefreshView(object? sender, EventArgs e)
    {
        this.StateHasChanged();
    }
}
