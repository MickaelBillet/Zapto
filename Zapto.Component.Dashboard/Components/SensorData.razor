@inject IStringLocalizer<Resource> Localizer
@inject ISensorDataViewModel? ViewModel
@implements IDisposable

<MudPaper Class="d-flex align-center justify-center mb-2 mx-1" Elevation="0" Style="@($"background:{Colors.Grey.Lighten4};width:200px;height:60px;")">
    @if (this.Model?.IsRunning == RunningStatus.UnHealthy) 
    {
        <Circle Color="#CE2222" Radius="10"></Circle>
    }
    else if (this.Model?.IsRunning == RunningStatus.Healthy) 
    {
        <Circle Color="#37A921" Radius="10"></Circle>
    }
    <MudText Typo="Typo.body2" Class="ml-1">@this.Model?.Name</MudText>
    <MudText Typo="Typo.body2" Class="ml-1 my-0">@this.Model?.Temperature</MudText>
    <img height="22" class="d-flex align-self-center" src="Images/icons8temperature40.png" />
</MudPaper>

@code {
    [Parameter]
    public SensorDataModel? Model { get; set; }

    private bool HasLaunch = false;

    protected override async Task OnInitializedAsync()
    {
        if (this.ViewModel != null)
        {
            await this.ViewModel.InitializeAsync(null);
            this.ViewModel.Refresh += RefreshView;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if ((this.Model != null) && (this.ViewModel != null) && (this.HasLaunch == false))
        {
            this.HasLaunch = await this.ViewModel.ReceiveStatusAsync(this.Model);
        }
    }

    public void Dispose()
    {
        if (this.ViewModel != null)
        {
            this.ViewModel.Refresh -= RefreshView;
            this.ViewModel?.Dispose();
            this.ViewModel = null;
        }
    }

    public void RefreshView(object? sender, EventArgs e)
    {
        this.StateHasChanged();
    }
}
