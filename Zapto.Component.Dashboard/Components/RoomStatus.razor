@implements IDisposable
@inject IRoomViewModel? ViewModel

<MudContainer Class="d-flex align-center justify-start gap-2 mt-2">
    @if (this.Model?.StatusSensors == RunningStatus.UnHealthy) //Unhealthy
    {
        <Circle Color="#CE2222" Radius="10"></Circle>
    }
    else if (this.Model?.StatusSensors == RunningStatus.Healthy) //Healthy
    {
        <Circle Color="#37A921" Radius="10"></Circle>
    }
    else if (this.Model?.StatusSensors == RunningStatus.Degraded) //Degraded
    {
        <Circle Color="#FF9B00" Radius="10"></Circle>
    }
    <MudText Typo="Typo.h6" Align="Align.Left" Class="ml-0 my-0">@this.Model?.Name</MudText>
</MudContainer>

@code
{
    [Parameter]
    public RoomModel? Model { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (this.ViewModel != null)
        {
            await this.ViewModel.InitializeAsync(null);
            this.ViewModel.Refresh += RefreshView;
        }
    }

    public void Dispose()
    {
        if (this.ViewModel != null)
        {
            this.ViewModel.Refresh -= RefreshView;
            this.ViewModel?.Dispose();
            this.ViewModel = null;
        }
    }

    public void RefreshView(object? sender, EventArgs e)
    {
        this.StateHasChanged();
    }
}
