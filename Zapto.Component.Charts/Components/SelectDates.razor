@inject ISelectDateViewModel ViewModel
@inject IStringLocalizer<Resource> Localizer
@implements IDisposable

@if ((this.MinDate != null) && (this.MaxDate != null))
{
    <MudGrid Class="mb-4 mt-5">
        <MudItem xs="12" sm="6" md="3" Style="min-width:400px">
            <MudPaper Class="d-flex align-center gap-4" Style="height:90px;">
                <MudDatePicker @ref="this.StartDatePicker" Label="@Localizer["StartDate"]" Editable="true" MinDate="@MinDate.Value.Date" MaxDate="@MaxDate.Value.Date" @bind-Date="StartDate" Placeholder="@Localizer["SelectDate"]" Class="mx-10" AutoClose="false">
                    <PickerActions>
                        <MudButton OnClick="@(() => this.CloseStartDatePicker(false))">Cancel</MudButton>
                        <MudButton Color="Color.Primary" OnClick="@(() => this.CloseStartDatePicker(true))">Ok</MudButton>
                    </PickerActions>
                </MudDatePicker>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="3" Style="min-width:400px">
            <MudPaper Class="d-flex align-center gap-4" Style="height:90px;">
                <MudDatePicker @ref="this.EndDatePicker" Label="@Localizer["EndDate"]" Editable="true" MinDate="@MinDate.Value.Date" MaxDate="@MaxDate.Value.Date" @bind-Date="EndDate" Placeholder="@Localizer["SelectDate"]" Class="mx-10" AutoClose="false">
                    <PickerActions>
                        <MudButton OnClick="@(() => this.CloseEndDatePicker(false))">Cancel</MudButton>
                        <MudButton Color="Color.Primary" OnClick="@(() => this.CloseEndDatePicker(true))">Ok</MudButton>
                    </PickerActions>
                </MudDatePicker>
            </MudPaper>
        </MudItem>
    </MudGrid>
}

@code
{
    MudBaseDatePicker? StartDatePicker;

    MudBaseDatePicker? EndDatePicker;

    [Parameter]
    public DateTime? StartDate { get; set; } = DateTime.Today;

    [Parameter]
    public DateTime? EndDate { get; set; } = DateTime.Today;

    [Parameter]
    public DateTime? MaxDate { get; set; }

    [Parameter]
    public DateTime? MinDate { get; set; }

    [Parameter]
    public EventCallback<DateTime?> StartDateChanged { get; set; }

    [Parameter]
    public EventCallback<DateTime?> EndDateChanged { get; set; }

    public void Dispose()
    {
    }

    private async void CloseStartDatePicker(bool submit)
    {
        this.StartDatePicker?.Close(submit);
       // await this.StartDateChanged.InvokeAsync(this.StartDate);
    }

    private async void CloseEndDatePicker(bool submit)
    {
        this.EndDatePicker?.Close(submit);
        await this.EndDateChanged.InvokeAsync(this.EndDate);
    }
}
