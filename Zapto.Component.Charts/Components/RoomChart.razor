@inject IStringLocalizer<Resource> Localizer
@implements IDisposable

@if (this.Config != null)
{
    <div class="mx-auto mt-2">
        <p>@CurrentDay</p>
        <Chart Config="this.Config" @ref="this.Chart" Height="400px" OnChartOver="OnHoverChart"></Chart>
    </div>
}

@code 
{
    [Parameter]
    public IEnumerable<string?>? Labels { get; set; } = null;
    [Parameter]
    public IEnumerable<decimal?>? Temperatures { get; set; } = null;
    [Parameter]
    public IEnumerable<decimal?>? Humidities { get; set; } = null;
    [Parameter]
    public string? CurrentDay { get; set; } = string.Empty;

    private LineChartConfig? Config { get; set; }
    private Chart? Chart { get; set; }
    private string? HoverString { get; set; }

    protected override void OnParametersSet()
    {
        if (Labels?.Any() == true)
        {
            this.Config = new LineChartConfig()
            {
                Options = new Options()
                {
                    Responsive = true,
                    MaintainAspectRatio = false,
                    Scales = new Dictionary<string, Axis>()
                    {
                        {
                            Scales.YAxisId, new Axis()
                            {
                                Type = "linear",
                                Position =  PSC.Blazor.Components.Chartjs.Models.Common.Position.Left,
                                Ticks = new Ticks()
                                {
                                    Color = Zapto.Component.Common.Helpers.ZaptoColors.PaletteBorder.FirstOrDefault()
                                },
                                SuggestedMax = 40,
                                SuggestedMin = 0,
                            }
                        },
                        {
                            Scales.Y2AxisId, new Axis()
                            {
                                Type = "linear",
                                Position = PSC.Blazor.Components.Chartjs.Models.Common.Position.Right,
                                Ticks = new Ticks()
                                {
                                    Color = Zapto.Component.Common.Helpers.ZaptoColors.PaletteBorder.Skip(4).FirstOrDefault()
                                },
                                SuggestedMax = 100,
                                SuggestedMin = 0,
                            }
                        }
                    }
                }
            };

            this.Config.Data.Labels = this.Labels.ToList();

            if (this.Temperatures?.Any() == true)
            {
                this.Config.Data.Datasets.Add(new LineDataset()
                {
                    Label = this.Localizer["Temperature"],
                    Data = this.Temperatures.ToList(),
                    BorderColor = Zapto.Component.Common.Helpers.ZaptoColors.PaletteBorder.FirstOrDefault(),
                    DataLabels = new DataLabels()
                    {
                        BackgroundColor = Zapto.Component.Common.Helpers.ZaptoColors.PaletteBorder.FirstOrDefault(),
                        BorderRadius = 4,
                        Color = "white",
                        Font = new Font()
                        {
                            Weight = "bold"
                        },
                        Padding = new Padding(6)
                    },
                    YAxisId = "y"
                });
            }

            if (this.Humidities?.Any() == true)
            {
                this.Config.Data.Datasets.Add(new LineDataset()
                {
                    Label = this.Localizer["Humidity"],
                    Data = this.Humidities.ToList(),
                    BorderColor = Zapto.Component.Common.Helpers.ZaptoColors.PaletteBorder.Skip(4).FirstOrDefault(),
                    DataLabels = new DataLabels()
                    {
                        BackgroundColor = Zapto.Component.Common.Helpers.ZaptoColors.PaletteBorder.Skip(4).FirstOrDefault(),
                        BorderRadius = 4,
                        Color = "white",
                        Font = new Font()
                        {
                            Weight = "bold"
                        },
                        Padding = new Padding(6)
                    },
                    YAxisId = "y2"
                });
            }
        }
    }

    public void Dispose()
    {
    }

    public async Task OnHoverChart(HoverContext hoverContext)
    {
        HoverString = $"X: {hoverContext.DataX} - Y: {hoverContext.DataY}";
        await Task.FromResult<bool>(true);
    }
}
