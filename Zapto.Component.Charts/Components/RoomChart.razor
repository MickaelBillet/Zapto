@inject IStringLocalizer<Resource> Localizer
@implements IDisposable

@if (this.Config != null)
{
    <div class="mx-auto mt-2">
        <p>@CurrentDay</p>
        <Chart Config="this.Config" @ref="this.Chart" Height="400px" OnChartOver="OnHoverChart"></Chart>
    </div>
}

@code 
{
    [Parameter]
    public IEnumerable<string?>? Labels { get; set; } = null;
    [Parameter]
    public IEnumerable<decimal?>? TemperatureIN { get; set; } = null;
    [Parameter]
    public IEnumerable<decimal?>? TemperatureOUT { get; set; } = null;
    [Parameter]
    public IEnumerable<decimal?>? Humidities { get; set; } = null;
    [Parameter]
    public string? CurrentDay { get; set; } = string.Empty;

    private LineChartConfig? Config { get; set; }
    private Chart? Chart { get; set; }
    private string? HoverString { get; set; }
    private const decimal TemperatureMargin = 5;
    private const decimal HumidityMargin = 10;

    protected override void OnParametersSet()
    {
        this.CreateChartConfig();
    }

    public void Dispose()
    {
    }

    public async Task OnHoverChart(HoverContext hoverContext)
    {
        this.HoverString = $"X: {hoverContext.DataX} - Y: {hoverContext.DataY}";
        await Task.FromResult<bool>(true);
    }

    private void CreateChartConfig()
    {
        if (this.Labels?.Any() == true)
        {
            this.Config = new LineChartConfig()
                {
                    Options = new Options()
                    {
                        Responsive = true,
                        MaintainAspectRatio = false,
                        Scales = new Dictionary<string, Axis>()
                    {
                        {
                            Scales.YAxisId, new Axis()
                            {
                                Type = "linear",
                                Position =  PSC.Blazor.Components.Chartjs.Models.Common.Position.Left,
                                Ticks = new Ticks()
                                {
                                    Color = ZaptoColors.PaletteBorder.FirstOrDefault()
                                },
                                SuggestedMax = this.TemperatureIN?.Max() + TemperatureMargin,
                                SuggestedMin = this.TemperatureIN?.Min() - TemperatureMargin,
                            }
                        },
                        {
                            Scales.Y2AxisId, new Axis()
                            {
                                Type = "linear",
                                Position = PSC.Blazor.Components.Chartjs.Models.Common.Position.Right,
                                Ticks = new Ticks()
                                {
                                    Color = ZaptoColors.PaletteBorder.Skip(4).FirstOrDefault()
                                },
                                SuggestedMax = this.TemperatureOUT?.Max() + TemperatureMargin,
                                SuggestedMin = this.TemperatureOUT?.Min() - TemperatureMargin,
                            }
                        }
                    }
                    }
                };

            this.Config.Data.Labels = this.Labels.ToList();

            if (this.TemperatureIN?.Any() == true)
            {
                this.Config.Data.Datasets.Add(new LineDataset()
                    {
                        Label = this.Localizer["Inside Temperature"],
                        Data = this.TemperatureIN.ToList(),
                        BorderColor = Zapto.Component.Common.Helpers.ZaptoColors.PaletteBorder.FirstOrDefault(),
                        DataLabels = new DataLabels()
                        {
                            BackgroundColor = Zapto.Component.Common.Helpers.ZaptoColors.PaletteBorder.FirstOrDefault(),
                            BorderRadius = 4,
                            Color = "white",
                            Font = new Font()
                            {
                                Weight = "bold"
                            },
                            Padding = new Padding(6)
                        },
                        YAxisId = "y"
                    });
            }

            if (this.TemperatureOUT?.Any() == true)
            {
                this.Config.Data.Datasets.Add(new LineDataset()
                    {
                        Label = this.Localizer["Outside Temperature"],
                        Data = this.TemperatureOUT.ToList(),
                        BorderColor = ZaptoColors.PaletteBorder.Skip(4).FirstOrDefault(),
                        DataLabels = new DataLabels()
                        {
                            BackgroundColor = ZaptoColors.PaletteBorder.Skip(4).FirstOrDefault(),
                            BorderRadius = 4,
                            Color = "white",
                            Font = new Font()
                            {
                                Weight = "bold"
                            },
                            Padding = new Padding(6)
                        },
                        YAxisId = "y2"
                    });
            }
        }
    }
}
