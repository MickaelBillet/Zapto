@inject IRoomChartListViewModel ViewModel
@inject IStringLocalizer<Resource> Localizer
@implements IDisposable

<h3>@RoomName</h3>

<MudGrid Class="mb-4 mt-5" Style="align-items: center;">
    <MudItem xs="12" sm="6" md="3" Style="min-width:400px">
        <MudPaper Class="d-flex align-center gap-4" Style="height:90px;">
            <MudDatePicker Label="@Localizer["StartDate"]" Editable="true" MinDate="@MinDate" MaxDate="@MaxDate" @bind-Date="StartDate" Placeholder="@Localizer["SelectDate"]" Class="mx-10" />
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6" md="3" Style="min-width:400px">
        <MudPaper Class="d-flex align-center gap-4" Style="height:90px;">
            <MudDatePicker Label="@Localizer["EndDate"]" Editable="true" MinDate="@MinDate" MaxDate="@MaxDate" @bind-Date="EndDate" Placeholder="@Localizer["SelectDate"]" Class="mx-10" />
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6" md="3" Style="min-width:400px" Class="ml-6">
        <MudButton Variant="Variant.Filled" OnClick="@(async(e) => await this.DisplayCharts())" Color="MudBlazor.Color.Primary">@Localizer["DisplayCharts"]</MudButton>
    </MudItem>
</MudGrid>

@if ((this.Models != null) && (this.Models.Any() == true))
{
    foreach (RoomChartModel model in this.Models)
    {
        <RoomChart Labels="@model.Labels" Humidities="@model.Humidities" Temperatures="@model.Temperatures" CurrentDay="@model.Day"></RoomChart>
    }
}
else
{
    <MudProgressCircular Color="Color.Default" Class="ml-6" Indeterminate="true" />
}

@code 
{
    [Parameter]
    public string RoomId { get; set; } = string.Empty;

    [Parameter]
    public string RoomName { get; set; } = string.Empty;

    private DateTime? MaxDate { get; set; } 
    private DateTime? MinDate { get; set; }
    private DateTime? StartDate { get; set; } = DateTime.Today;
    private DateTime? EndDate { get; set; } = DateTime.Today;
    private IEnumerable<RoomChartModel>? Models { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (this.ViewModel != null)
        {
            await this.ViewModel.InitializeAsync(null);
        }
    }
    protected override async Task OnParametersSetAsync()
    {
        if ((this.ViewModel != null) && (string.IsNullOrEmpty(this.RoomId) == false))
        {
            this.MaxDate = await this.ViewModel.GetRoomMaxDate(this.RoomId);
            this.MinDate = await this.ViewModel.GetRoomMinDate(this.RoomId);

            if ((this.MinDate <= this.StartDate) && (this.MaxDate >= this.EndDate))
            {
                await this.DisplayCharts();
            }
        }
    }
    public void Dispose()
    {
        this.ViewModel?.Dispose();
    }    

    public async Task DisplayCharts()
    {
        if (this.ViewModel != null)
        {
            this.Models = await this.ViewModel.GetChartsData(this.StartDate, this.EndDate, this.RoomId);
        }
        else
        {
            this.Models = null;
        }
    }
}


