@inject IRoomChartListViewModel ViewModel
@inject IStringLocalizer<Resource> Localizer
@implements IDisposable

<h3>@RoomName</h3>

<SelectDates RoomId="@this.RoomId" MaxDate="@this.MaxDate" MinDate="@this.MinDate" @bind-StartDate=@StartDate @bind-EndDate=@EndDate></SelectDates>

@if ((this.Models != null) && (this.Models.Any() == true))
{
    foreach (RoomChartModel model in this.Models)
    {
        <RoomChart Labels="@model.Labels" Humidities="@model.Humidities" Temperatures="@model.Temperatures" CurrentDay="@model.Day"></RoomChart>
    }
}
else
{
    <MudProgressCircular Color="Color.Default" Class="ml-6" Indeterminate="true" />
}

@code 
{
    private DateTime? startdate = DateTime.Today;
    private DateTime? enddate = DateTime.Today;

    public event EventHandler? PropertyChanged;

    [Parameter]
    public string RoomId { get; set; } = string.Empty;

    [Parameter]
    public string RoomName { get; set; } = string.Empty;

    public DateTime? MaxDate { get; set; }

    public DateTime? MinDate { get; set; }

    public DateTime? StartDate 
    { 
        get { return startdate; }
        set 
        {
            startdate = value;
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged.Invoke(this, new EventArgs());
            }
        } 
    } 

    private DateTime? EndDate
    {
        get { return enddate; }
        set
        {
            enddate = value;
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged.Invoke(this, new EventArgs());
            }
        }
    }

    private IEnumerable<RoomChartModel>? Models { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (this.ViewModel != null)
        {
            await this.ViewModel.InitializeAsync(null);
            this.PropertyChanged += this.PropertyChangedHandler;
        }
    }
    protected override async Task OnParametersSetAsync()
    {
        if ((this.ViewModel != null) && (string.IsNullOrEmpty(this.RoomId) == false))
        {
            this.MaxDate = await this.ViewModel.GetRoomMaxDate(this.RoomId);
            this.MinDate = await this.ViewModel.GetRoomMinDate(this.RoomId);

            await this.DisplayCharts();
        }
    }
    public void Dispose()
    {
        this.ViewModel?.Dispose();
        this.PropertyChanged -= this.PropertyChangedHandler;
    }   
    public async Task DisplayCharts()
    {
        if (this.ViewModel != null)
        {
            this.Models = await this.ViewModel.GetChartsData(this.StartDate, this.EndDate, this.RoomId);
        }
        else
        {
            this.Models = null;
        }
    }
    private async void PropertyChangedHandler(object? sender, EventArgs? args)
    {
        await this.DisplayCharts();
    }
}


