@inject IRoomChartViewModel ViewModel
@inject IStringLocalizer<Resource> Localizer
@inject IZaptoLocalStorageService ZaptoLocalStorageService
@inject ISnackbar Snackbar
@implements IDisposable

<h3>@RoomName</h3>

<SelectDates RoomId="@this.RoomId" MaxDate="@this.MaxDate" MinDate="@this.MinDate" @bind-StartDate=@StartDate @bind-EndDate=@EndDate @bind-IsClicked=@IsClicked></SelectDates>
<RoomChartListView Models="@this.Models"></RoomChartListView>

@code
{
    private bool isclicked = false;
    private const string chartsDataKey = "ChartsDataKey";

    #region Properties
    [Parameter]
    public string RoomId { get; set; } = string.Empty;

    [Parameter]
    public string RoomName { get; set; } = string.Empty;

    [Parameter]
    public string Location { get; set; } = string.Empty;

    private event EventHandler? PropertyChanged;

    private PersistingComponentStateSubscription PersistingSubscription { get; set; }

    private DateTime? MaxDate { get; set; }

    private DateTime? MinDate { get; set; }

    public bool IsClicked
    {
        get
        {
            return isclicked;
        }

        set
        {
            if (isclicked != value)
            {
                isclicked = value;
                if ((this.PropertyChanged != null) && (isclicked == true))
                {
                    this.PropertyChanged.Invoke(this, new EventArgs());
                }
            }
        }
    }

    private DateTime? StartDate { get; set; } = DateTime.Today;

    private DateTime? EndDate { get; set; } = DateTime.Today;

    private IEnumerable<RoomChartModel>? Models { get; set; }
    #endregion

    #region Methods

    protected override void OnInitialized()
    {
        this.PropertyChanged += this.PropertyChangedHandler;
    }

    protected override async Task OnParametersSetAsync()
    {
        if ((this.ViewModel != null) && (string.IsNullOrEmpty(this.RoomId) == false))
        {
            await this.ViewModel.InitializeAsync(this.Location);
            this.MaxDate = await this.ViewModel.GetRoomMaxDate(this.RoomId);
            this.MinDate = await this.ViewModel.GetRoomMinDate(this.RoomId);

            await this.DisplayCharts();
        }
    }
    public void Dispose()
    {
        this.ViewModel?.Dispose();
        this.PropertyChanged -= this.PropertyChangedHandler;
        this.PersistingSubscription.Dispose();
    }
    public async Task DisplayCharts()
    {
        this.Models = await this.ViewModel.GetChartsData(this.StartDate, this.EndDate, this.RoomId);
        this.IsClicked = false;
    }
    private async void PropertyChangedHandler(object? sender, EventArgs? args)
    {
        bool hasChanged = false;

        if (this.ZaptoLocalStorageService != null)
        {
            String? startdateStr = await this.ZaptoLocalStorageService.GetItemAsync<String>("StartDate");
            if (DateTime.TryParse(startdateStr, out DateTime startdate))
            {
                if ((this.StartDate != null) && (this.StartDate.Value.Day != startdate.Day))
                {
                    this.StartDate = startdate;
                    hasChanged = true;
                }
            }

            String? enddatestr = await this.ZaptoLocalStorageService.GetItemAsync<String>("EndDate");
            if (DateTime.TryParse(enddatestr, out DateTime enddate))
            {
                if ((this.EndDate != null) && (this.EndDate.Value.Day != enddate.Day))
                {
                    this.EndDate = enddate;
                    hasChanged = true;
                }
            }

            if (hasChanged == true)
            {
                await this.DisplayCharts();
                this.StateHasChanged();
            }
        }       
    }
    #endregion
}


